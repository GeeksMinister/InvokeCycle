<div class="Experiment1">
    <h3>Experiment 1</h3>
    <div class="component-group">
        <ChildComponent_1 />
        <ChildComponent_2 Text=@ParentString />
        <ChildComponent_3 OnClick=@(() => Task.CompletedTask) Text=@ParentString/> 
        <p>
            These two below have OnClick event set to a method in parent-level
            They both will get their life cycle methods invoked except for Oninitialized().
        </p>
        <ChildComponent_4 OnClick=EmptyTask />                    
        <ChildComponent_5 OnClick=EmptyTask Text=@ParentString />
    </div>

    <div class="button-control">
        <Button Text=@($"Change number: {number}") OnClick=@(() => number = Random.Shared.Next(0, 1001)) />

        <Button Text="Invoke Inline anonymous" OnClick=@(() => Console.WriteLine("* Parent * Inline anonymous invoked")) />

        <Button Text="Invoke StateHasChanged" OnClick=StateHasChanged />

        <Button Text="Invoke Void method" OnClick=VoidMethod />

        <Button Text="Invoke Task method" OnClick=TaskMethod />
    </div>
</div>

@code
{
    private int number { get; set; }

    private string? ParentString { get; set; } = "ParentString";

    private void VoidMethod()
    {
        Console.WriteLine("* Parent * VoidMethod invoked!");
    }

    private Task TaskMethod()
    {
        Console.WriteLine("* Parent * TaskMethod invoked!");
        return Task.CompletedTask;
    }

    private Task EmptyTask() => Task.CompletedTask;
}
